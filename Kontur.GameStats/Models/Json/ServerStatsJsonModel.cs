using System;
using System.Collections.Generic;
using System.Linq;
using Kontur.GameStats.Models.Entities;

namespace Kontur.GameStats.Models.Json
{
	public class ServerStatsJsonModel
	{
		public ServerStatsJsonModel()
		{
		}

		public ServerStatsJsonModel(ServerEntityModel entity)
		{
			TotalMatchesPlayed = entity.TotalMatchesPlayed;
			AverageMatchesPerDay = entity.AvgMatchesPerDay;
			AveragePopulation = entity.AvgPopulation;
			MaximumMatchesPerDay = entity.MaxMatchesPerDay;
			MaximumPopulation = entity.MaxPopulation;
			Top5GameModes = entity.GetTop5GameModes();
			Top5Maps = entity.GetTop5GameMaps();
		}

		public int TotalMatchesPlayed { get; set; }
		public int MaximumMatchesPerDay { get; set; }
		public double AverageMatchesPerDay { get; set; }
		public int MaximumPopulation { get; set; }
		public double AveragePopulation { get; set; }
		public List<string> Top5GameModes { get; set; } = new List<string>();
		public List<string> Top5Maps { get; set; } = new List<string>();

		#region autogenerated equality members

		protected bool Equals(ServerStatsJsonModel other)
		{
			return TotalMatchesPlayed == other.TotalMatchesPlayed &&
			       MaximumMatchesPerDay == other.MaximumMatchesPerDay &&
			       Math.Abs(AverageMatchesPerDay - other.AverageMatchesPerDay) < 1e-7 &&
			       MaximumPopulation == other.MaximumPopulation &&
			       Math.Abs(AveragePopulation - other.AveragePopulation) < 1e-7 &&
			       Top5GameModes.SequenceEqual(other.Top5GameModes) &&
			       Top5Maps.SequenceEqual(other.Top5Maps);
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			if (obj.GetType() != this.GetType()) return false;
			return Equals((ServerStatsJsonModel) obj);
		}

		public override int GetHashCode()
		{
			unchecked
			{
				var hashCode = TotalMatchesPlayed;
				hashCode = (hashCode * 397) ^ MaximumMatchesPerDay;
				hashCode = (hashCode * 397) ^ AverageMatchesPerDay.GetHashCode();
				hashCode = (hashCode * 397) ^ MaximumPopulation;
				hashCode = (hashCode * 397) ^ AveragePopulation.GetHashCode();
				hashCode = (hashCode * 397) ^ (Top5GameModes != null ? Top5GameModes.GetHashCode() : 0);
				hashCode = (hashCode * 397) ^ (Top5Maps != null ? Top5Maps.GetHashCode() : 0);
				return hashCode;
			}
		}

		#endregion
	}
}
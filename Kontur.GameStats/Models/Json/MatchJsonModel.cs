using System.Collections.Generic;
using System.Linq;
using Kontur.GameStats.Models.Entities;
using Newtonsoft.Json;

namespace Kontur.GameStats.Models.Json
{
	public class MatchJsonModel
	{
		public MatchJsonModel()
		{
		}

		public MatchJsonModel(MatchEntityModel entity)
		{
			Scoreboard = JsonConvert.DeserializeObject<ICollection<Record>>(entity.Scoreboard);
			FragLimit = entity.FragLimit;
			GameMode = entity.GameMode;
			Map = entity.Map;
			TimeElapsed = entity.TimeElapsed;
			TimeLimit = entity.TimeLimit;
		}

		public string Map { get; set; }
		public string GameMode { get; set; }
		public int FragLimit { get; set; }
		public int TimeLimit { get; set; }
		public double TimeElapsed { get; set; }
		public virtual ICollection<Record> Scoreboard { get; set; } = new List<Record>();

		#region autogenerated equality members

		protected bool Equals(MatchJsonModel other)
		{
			return string.Equals(Map, other.Map) && string.Equals(GameMode, other.GameMode) &&
			       FragLimit == other.FragLimit && TimeLimit == other.TimeLimit &&
			       TimeElapsed.Equals(other.TimeElapsed) && Scoreboard.SequenceEqual(other.Scoreboard);
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			if (obj.GetType() != this.GetType()) return false;
			return Equals((MatchJsonModel) obj);
		}

		public override int GetHashCode()
		{
			unchecked
			{
				var hashCode = (Map != null ? Map.GetHashCode() : 0);
				hashCode = (hashCode * 397) ^ (GameMode != null ? GameMode.GetHashCode() : 0);
				hashCode = (hashCode * 397) ^ FragLimit;
				hashCode = (hashCode * 397) ^ TimeLimit;
				hashCode = (hashCode * 397) ^ TimeElapsed.GetHashCode();
				hashCode = (hashCode * 397) ^ (Scoreboard != null ? Scoreboard.GetHashCode() : 0);
				return hashCode;
			}
		}

		#endregion
	}
}
using System;
using System.Collections.Generic;
using System.Linq;
using Kontur.GameStats.Models.Entities;
using Newtonsoft.Json;

namespace Kontur.GameStats.Models.Json
{
	public class PlayerJsonModel
	{
		public PlayerJsonModel()
		{
		}

		public PlayerJsonModel(PlayerEntityModel entity, DateTime latestGameDate)
		{
			TotalMatchesPlayed = entity.TotalMatchesPlayed;
			TotalMatchesWon = entity.TotalMatchesWon;
			LastMatch = new DateTime(entity.LatestMatchInTicks);
			var matchesPerServer = JsonConvert.DeserializeObject<Dictionary<string, int>>(entity.MatchesPerServer);
			var matchesPerDate = JsonConvert.DeserializeObject<Dictionary<DateTime, int>>(entity.MatchesPerDate);
			var matchesPerMode = JsonConvert.DeserializeObject<Dictionary<string, int>>(entity.MatchesPerMode);
			FavoriteServer = matchesPerServer.OrderByDescending(pair => pair.Value).First().Key;
			UniqueServers = matchesPerServer.Keys.Distinct().Count();
			FavoriteGameMode = matchesPerMode.OrderByDescending(pair => pair.Value).First().Key;
			AverageScoreboardPercent = entity.TotalScoreboardPercent / entity.TotalMatchesPlayed;
			MaximumMatchesPerDay = matchesPerDate.OrderByDescending(pair => pair.Value).First().Value;
			var firstDateOfPlayer = matchesPerDate.Keys.OrderBy(date => date).First();
			var totalGameDays = new TimeSpan(latestGameDate.Ticks - firstDateOfPlayer.Ticks).TotalDays + 1;
			AverageMatchesPerDay = TotalMatchesPlayed / totalGameDays;
			KillToDeathRatio = entity.CountKillToDeathRatio();
		}

		public int TotalMatchesPlayed { get; set; }
		public int TotalMatchesWon { get; set; }
		public DateTime LastMatch { get; set; }
		public string FavoriteServer { get; set; }
		public int UniqueServers { get; set; }
		public string FavoriteGameMode { get; set; }
		public double AverageScoreboardPercent { get; set; }
		public int MaximumMatchesPerDay { get; set; }
		public double AverageMatchesPerDay { get; set; }
		public double KillToDeathRatio { get; set; }

		#region autogenerated equality members

		protected bool Equals(PlayerJsonModel other)
		{
			return TotalMatchesPlayed == other.TotalMatchesPlayed && TotalMatchesWon == other.TotalMatchesWon &&
			       LastMatch.Equals(other.LastMatch) && string.Equals(FavoriteServer, other.FavoriteServer) &&
			       UniqueServers == other.UniqueServers && string.Equals(FavoriteGameMode, other.FavoriteGameMode) &&
			       AverageScoreboardPercent.Equals(other.AverageScoreboardPercent) &&
			       MaximumMatchesPerDay == other.MaximumMatchesPerDay &&
			       AverageMatchesPerDay.Equals(other.AverageMatchesPerDay) &&
			       KillToDeathRatio.Equals(other.KillToDeathRatio);
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			if (obj.GetType() != this.GetType()) return false;
			return Equals((PlayerJsonModel) obj);
		}

		public override int GetHashCode()
		{
			unchecked
			{
				var hashCode = TotalMatchesPlayed;
				hashCode = (hashCode * 397) ^ TotalMatchesWon;
				hashCode = (hashCode * 397) ^ LastMatch.GetHashCode();
				hashCode = (hashCode * 397) ^ (FavoriteServer != null ? FavoriteServer.GetHashCode() : 0);
				hashCode = (hashCode * 397) ^ UniqueServers;
				hashCode = (hashCode * 397) ^ (FavoriteGameMode != null ? FavoriteGameMode.GetHashCode() : 0);
				hashCode = (hashCode * 397) ^ AverageScoreboardPercent.GetHashCode();
				hashCode = (hashCode * 397) ^ MaximumMatchesPerDay;
				hashCode = (hashCode * 397) ^ AverageMatchesPerDay.GetHashCode();
				hashCode = (hashCode * 397) ^ KillToDeathRatio.GetHashCode();
				return hashCode;
			}
		}

		#endregion
	}
}
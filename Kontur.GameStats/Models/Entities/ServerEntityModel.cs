using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Kontur.GameStats.Infrastructure;
using Kontur.GameStats.Models.Json;
using Newtonsoft.Json;

namespace Kontur.GameStats.Models.Entities
{
	public class ServerEntityModel
	{
		public ServerEntityModel()
		{
		}

		public List<string> GetTop5GameModes()
		{
			var matchesPerMode = JsonConvert.DeserializeObject<Dictionary<string, int>>(MatchesPerMode);
			return matchesPerMode == null
				? new List<string>()
				: matchesPerMode
					.OrderByDescending(pair => pair.Value)
					.Select(pair => pair.Key)
					.ToList();
		}

		public List<string> GetTop5GameMaps()
		{
			var matchesPerMap = JsonConvert.DeserializeObject<Dictionary<string, int>>(MatchesPerMap);
			return matchesPerMap == null
				? new List<string>()
				: matchesPerMap.OrderByDescending(pair => pair.Value)
					.Select(pair => pair.Key)
					.ToList();
		}

		public void Update(MatchJsonModel matchJson, DateTime matchDate, DateTime latestGameDate)
		{
			var matchesPerMap = JsonConvert.DeserializeObject<Dictionary<string, int>>(MatchesPerMap) ??
			                    new Dictionary<string, int>();
			var matchesPerDate = JsonConvert.DeserializeObject<Dictionary<DateTime, int>>(MatchesPerDate) ??
			                     new Dictionary<DateTime, int>();
			var matchesPerMode = JsonConvert.DeserializeObject<Dictionary<string, int>>(MatchesPerMode) ??
			                     new Dictionary<string, int>();
			matchesPerDate.AddOrIncrement(matchDate);
			matchesPerMode.AddOrIncrement(matchJson.GameMode);
			matchesPerMap.AddOrIncrement(matchJson.Map);
			MatchesPerDate = JsonConvert.SerializeObject(matchesPerDate);
			MatchesPerMap = JsonConvert.SerializeObject(matchesPerMap);
			MatchesPerMode = JsonConvert.SerializeObject(matchesPerMode);

			TotalMatchesPlayed++;
			TotalPopulation += matchJson.Scoreboard.Count;
			Top5GameModes = JsonConvert.SerializeObject(GetTop5GameModes());
			Top5Maps = JsonConvert.SerializeObject(GetTop5GameMaps());
			MaxMatchesPerDay = matchesPerDate.OrderByDescending(pair => pair.Value).First().Value;
			var firstDateOfServer = matchesPerDate.Keys.OrderBy(date => date).First();
			var totalGameDays = new TimeSpan(latestGameDate.Ticks - firstDateOfServer.Ticks).TotalDays + 1;
			AvgMatchesPerDay = TotalMatchesPlayed / totalGameDays;
			MaxPopulation = Math.Max(matchJson.Scoreboard.Count, MaxPopulation);
			AvgPopulation = 1.0 * TotalPopulation / TotalMatchesPlayed;
		}

		[Key]
		public string Endpoint { get; set; }

		public string Server { get; set; }
		public string GameModes { get; set; }
		public int TotalMatchesPlayed { get; set; }
		public int MaxMatchesPerDay { get; set; }
		public double AvgMatchesPerDay { get; set; }
		public int MaxPopulation { get; set; }
		public double AvgPopulation { get; set; }
		public string Top5GameModes { get; set; } = String.Empty;
		public string Top5Maps { get; set; } = String.Empty;
		public string MatchesPerMap { get; set; } = String.Empty;
		public string MatchesPerDate { get; set; } = String.Empty;
		public string MatchesPerMode { get; set; } = String.Empty;
		public int TotalPopulation { get; set; }

		#region autogenerated equality members

		protected bool Equals(ServerEntityModel other)
		{
			return string.Equals(Endpoint, other.Endpoint);
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			if (obj.GetType() != this.GetType()) return false;
			return Equals((ServerEntityModel) obj);
		}

		public override int GetHashCode()
		{
			return (Endpoint != null ? Endpoint.GetHashCode() : 0);
		}

		#endregion
	}
}